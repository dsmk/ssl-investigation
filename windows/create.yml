---
- name: Create windows test instance
  hosts: localhost
  gather_facts: false
  vars:
    #instance_type: "t2.small"
    # t2.small: 1 cpu (Variable) 2G RAM Low/Mod network - $0.023/hr
    #instance_type: "t2.small"
    # m4.large: 2 cpu () 8G RAM 450 Mbps - $0.1/hr
    instance_type: "m4.large"

    # This prefix defaults to the user running the playbook but can be overriden with -e user=fred
    user: "{{ lookup('env', 'USER') }}"

    # this sequence # is designed to be overriden on the 
    # command line to support multiple instances.  -e number=2
    number: 1

 #   Creation of virtual environments is done by executing the command venv:

#python -m venv /path/to/new/virtual/environment
#Running this command creates the target directory (creating any parent directories that donâ€™t exist already) and places a pyvenv.cfg file in it with a home key pointing to the Python installation from which the command was run (a common name for the target directory is .venv). It also creates a bin (or Scripts on Windows) subdirectory containing a copy/symlink of the Python binary/binaries (as appropriate for the platform or arguments used at environment creation time). It also creates an (initially empty) lib/pythonX.Y/site-packages subdirectory (on Windows, this is Lib\site-packages). If an existing directory is specified, it will be re-used.

  tasks:

# Check that we are logged into the correct account - as a side-effect this will provide the
    # name of the account
    - name: "account_config- Check that you are still authorized"
      tags:
        - check_perm
      amazon.aws.aws_caller_info:
      register: caller_info

    - name: Determine the variables 
      tags:
        - check_perm
      set_fact:
        account_name: "{{ caller_info.account_alias }}"
        stack_name: "{{ user }}-test-win-{{ number }}"
        key_name: "user-{{ user }}-{{ number }}"
        key_file_path: "./aws_ssh_key-{{ user }}-{{ number }}.pem"
        inventory_file: "./hosts-{{ number }}.yaml"
        vpc_prefix: "app-nonprod-vpc"
        hosted_zone_name: "app-nprd.aws-cloud.bu.edu"

    - name: Ensure that the keypair has been saved
      amazon.aws.ec2_key:
        name: "{{ key_name }}"
        key_type: rsa
        file_name: "{{ key_file_path }}"
        
    - name: Ensure that the CloudFormation Stack has been created
      amazon.aws.cloudformation:
        stack_name: "{{ stack_name }}"
        region: "us-east-1"
        state: present
        template: "windows.yaml"
        template_parameters:
          VpcPrefix: "{{ vpc_prefix }}"
          HostedZoneName: "{{ hosted_zone_name }}"
          KeyPairName: "{{ key_name }}"
          Service: "user-{{ user }}"
          Function: "sslwin"
          Landscape: "sandbox"

    - name: Get data from the CloudFormation stack
      amazon.aws.cloudformation_info:
        stack_name: "{{ stack_name }}"
      register: stack_info
      failed_when: stack_info.cloudformation[stack_name] is undefined

    # - debug: 
    #     msg: "{{ stack_info }}"

    - name: Build variables based on stack outputs
      set_fact:
        instance_id: "{{ stack_info.cloudformation[stack_name].stack_outputs['EC2Instance'] }}"
        instance_ip: "{{ stack_info.cloudformation[stack_name].stack_outputs['EC2InstanceIP'] }}"

    - name: "Wait for the instance to have booted"
      ansible.builtin.wait_for:
        host: "{{ instance_ip }}"
        port: 5986
        delay: 10

    - name: "Get Administrator password"
      community.aws.ec2_win_password:
        instance_id: "{{ instance_id }}"
        key_file: "{{ key_file_path }}"
      register: adminpw

    - name: Create hosts file for future playbooks
      tags:
        - now
        - ec2
      template:
        src: "hosts.yaml.j2"
        dest: "{{ inventory_file }}"

    # - name: "Build an inventory entry for the host"
    #   no_log: true
    #   add_host:
    #     hostname: "{{ stack_name }}"
    #     groups: "dynamic_win_test"
    #     ansible_host: "{{ instance_ip }}"
    #     ansible_user: "Administrator"
    #     ansible_password: "{{ adminpw.win_password }}"
    #     ansible_port: 5986
    #     ansible_connection: winrm
    #     ansible_winrm_server_cert_validation: ignore

# - name: Create windows test instance
#   hosts: dynamic_win_test
#   gather_facts: false

#   tasks:
#     - name: "Ensure that the Windows firewall is Disabled - we use security groups"
#       ansible.windows.win_firewall:
#         state: disabled

    # - name: Decrypt the temp password
    #   shell: "echo {{ encrypted_pw }} | base64 -d | openssl rsautl -decrypt -inkey {{ key_file_path }}"
    #   register: decryptedpw
    # - name: Launch master instance
    #   tags: 
    #     - ec2
    #     - master
    #   ec2:
    #     assign_public_ip: yes
    #     wait: true
    #     count_tag:
    #       Name: "{{ instance_name }}-master"
    #     exact_count: 1
    #     group: "{{ master_group }}"
    #     image: '{{ image }}'
    #     instance_tags:
    #       Name: '{{ instance_name }}-master'
    #     instance_type: '{{ instance_type }}'
    #     key_name: '{{ key_name }}'
    #     vpc_subnet_id: '{{ subnet_id }}'
    #   register: ec2_master

    # - name: Debug
    #   tags:
    #     - now
    #     - ec2
    #   debug: 
    #     msg: "{{ item }}"
    #   with_items: "{{ ec2_master.tagged_instances }}"

    # - name: Create master security group
    #   tags:
    #     - ec2
    #     - ec2_groups
    #   ec2_group:
    #     name: "{{ master_group }}"
    #     state: present
    #     description: "Access to jmeter master box"
    #     vpc_id: "{{ vpc_id }}"
    #     rules:
    #       - proto: tcp
    #         from_port: 22
    #         to_port: 22
    #         cidr_ip: "168.122.88.0/24"
    #       - proto: tcp
    #         from_port: 22
    #         to_port: 22
    #         cidr_ip: "168.122.75.0/24"
    #       - proto: tcp
    #         from_port: 22
    #         to_port: 22
    #         cidr_ip: "128.197.229.78/32"
    #   register: master_security_group

    # - name: Create hosts file for future playbooks
    #   tags:
    #     - now
    #     - ec2
    #   template:
    #     src: "hosts.j2"
    #     dest: "./hosts"

    # - name: Create login script to master for future use
    #   tags:
    #     - master
    #     - ec2
    #   template:
    #     src: "alogin.j2"
    #     dest: "./amaster"
    #     mode: "0555"
    #   with_indexed_items: "{{ ec2_master.tagged_instances }}"

    # - name: Create login script to workers for future use
    #   tags:
    #     - worker
    #     - ec2
    #   template:
    #     src: "alogin.j2"
    #     dest: "./aworker.{{ item.0 }}"
    #     mode: "0555"
    #   with_indexed_items: "{{ ec2_workers.tagged_instances }}"
